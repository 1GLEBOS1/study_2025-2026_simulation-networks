---
## Author
author:
  name: Поляков Глеб Сергеевич
  affiliation:
    - name: Российский университет дружбы народов
      country: Российская Федерация
      postal-code: 117198
      city: Москва
      address: ул. Миклухо-Маклая, д. 13

## Title
title: "Лабораторная работа №4"
subtitle: "Эмуляция и измерение задержек в глобальных сетях"
license: "CC BY"
---

# Цель работы

Основной целью работы является знакомство с NETEM — инструментом для тестирования производительности приложений в виртуальной сети, а также получение навыков проведения интерактивного и воспроизводимого экспериментов по измерению задержки и её дрожания (jitter) в моделируемой сети в среде Mininet.

# Задание

1. Задайте простейшую топологию, состоящую из двух хостов и коммутатора с назначенной по умолчанию mininet сетью 10.0.0.0/8.
2. Проведите интерактивные эксперименты по добавлению/изменению задержки, джиттера, значения корреляции для джиттера и задержки, распределения времени задержки в эмулируемой глобальной сети.
3. Реализуйте воспроизводимый эксперимент по заданию значения задержки в эмулируемой глобальной сети. Постройте график.
4. Самостоятельно реализуйте воспроизводимые эксперименты по изменению задержки, джиттера, значения корреляции для джиттера и задержки, распределения времени задержки в эмулируемой глобальной сети. Постройте графики.


# Выполнение лабораторной работы

## 4.4.1. Запуск лабораторной топологии
1. Запустите виртуальную среду с mininet.
2. Из основной ОС подключитесь к виртуальной машине:
1 ssh -Y mininet@192.168.x.y
3. В виртуальной машине mininet при необходимости исправьте права запуска X-соединения. Скопируйте значение куки (MIT magic cookie)1 своего пользователя mininet в файл для пользователя root:
1 mininet@mininet-vm:~$ xauth list $DISPLAY
2 mininet-vm/unix:10 MIT-MAGIC-COOKIE-1 295acad8e35d17636924c5ab80e8462d
3
4 mininet@mininet-vm:~$ sudo -i
5 root@mininet-vm:~# xauth add mininet-vm/unix:10 MIT-MAGIC-COOKIE-1 295acad8e35d17636924c5ab80e8462d
6 root@mininet-vm:~# logout
![](image/img_1.png){#fig-001 width=70%}
После выполнения этих действий графические приложения должны запускаться под пользователем mininet.

4. Задайте простейшую топологию, состоящую из двух хостов и коммутатора с назначенной по умолчанию mininet сетью 10.0.0.0/8:
1 sudo mn --topo=single,2 -x
После введения этой команды запустятся терминалы двух хостов, коммутатора и контроллера. Терминалы коммутатора и контроллера можно закрыть.
5. На хостах h1 и h2 введите команду ifconfig, чтобы отобразить информацию, относящуюся к их сетевым интерфейсам и назначенным им IP-адресам.
В дальнейшем при работе с NETEM и командой tc будут использоваться интерфейсы h1-eth0 и h2-eth0.
6. Проверьте подключение между хостами h1 и h2 с помощью команды ping
с параметром -c 6.
![](image/img_2.png){#fig-002 width=70%}
![](image/img_3.png){#fig-003 width=70%}
7. Укажите в отчёте минимальное, среднее, максимальное и стандартное отклонение времени приёма-передачи (RTT).
## 4.4.2. Интерактивные эксперименты
## 4.4.2.1. Добавление/изменение задержки в эмулируемой глобальной сети
Сетевые эмуляторы задают задержки на интерфейсе. Например, задержка, вносимая в интерфейс коммутатора A, который подключён к интерфейсу коммутатора B, может представлять собой задержку распространения WAN, соединяющей оба коммутатора.
1
Значение для MIT-MAGIC-COOKIE приведено условно.
1. На хосте h1 добавьте задержку в 100 мс к выходному интерфейсу:
1 sudo tc qdisc add dev h1-eth0 root netem delay 100ms
![](image/img_4.png){#fig-004 width=70%}
Здесь:
- sudo: выполнить команду с более высокими привилегиями;
- tc: вызвать управление трафиком Linux;
- qdisc: изменить дисциплину очередей сетевого планировщика;
- add: создать новое правило;
- dev h1-eth0: указать интерфейс, на котором будет применяться правило;
- netem: использовать эмулятор сети;
- delay 100ms: задержка ввода 100 мс.
2. Проверьте, что соединение от хоста h1 к хосту h2 имеет задержку 100 мс, используя команду ping с параметром -c 6 с хоста h1. Укажите в отчёте минимальное, среднее, максимальное и стандартное отклонение времени приёма-передачи (RTT).
![](image/img_5.png){#fig-005 width=70%}
3. Для эмуляции глобальной сети с двунаправленной задержкой необходимо к соответствующему интерфейсу на хосте h2 также добавить задержку в 100 миллисекунд:
1 sudo tc qdisc add dev h2-eth0 root netem delay 100ms
![](image/img_6.png){#fig-006 width=70%}
![](image/img_7.png){#fig-007 width=70%}
4. Проверьте, что соединение между хостом h1 и хостом h2 имеет RTT в 200 мс (100 мс от хоста h1 к хосту h2 и 100 мс от хоста h2 к хосту h1), повторив команду ping с параметром -c 6 на терминале хоста h1. Укажите в отчёте минимальное, среднее, максимальное и стандартное отклонение времени приёма-передачи (RTT).
![](image/img_8.png){#fig-008 width=70%}
## 4.4.2.2. Изменение задержки в эмулируемой глобальной сети
1. Измените задержку со 100 мс до 50 мс для отправителя h1:
1 sudo tc qdisc change dev h1-eth0 root netem delay 50ms и для получателя h2:
1 sudo tc qdisc change dev h2-eth0 root netem delay 50ms
![](image/img_9.png){#fig-009 width=70%}
![](image/img_10.png){#fig-010 width=70%}
2. Проверьте, что соединение от хоста h1 к хосту h2 имеет задержку 100 мс, используя команду ping с параметром -c 6 с терминала хоста h1. Укажите в отчёте минимальное, среднее, максимальное и стандартное отклонение времени приёма-передачи (RTT).


## 4.4.2.3. Восстановление исходных значений (удаление правил) задержки в эмулируемой глобальной сети
1. Восстановите конфигурацию по умолчанию, удалив все правила, применённые к сетевому планировщику соответствующего интерфейса. Для отправителя h1:
1 sudo tc qdisc del dev h1-eth0 root netem
Для получателя h2:
1 sudo tc qdisc del dev h2-eth0 root netem
![](image/img_11.png){#fig-011 width=70%}
2. Проверьте, что соединение между хостом h1 и хостом h2 не имеет явно установленной задержки, используя команду ping с параметром -c 6 с терминала хоста h1. Укажите в отчёте минимальное, среднее, максимальное и стандартное отклонение времени приёма-передачи (RTT).

## 4.4.2.4. Добавление значения дрожания задержки в интерфейс подключения к эмулируемой глобальной сети
В сетях нет постоянной задержки. Она может варьироваться в зависимости от других потоков трафика, конкурирующих за тот же путь. Джиттер (jitter) — это изменение времени задержки. Параметры задержки описываются в терминах теории вероятностей средним значением 𝜇, стандартным отклонением 𝜎 и корреляцией. По умолчанию NETEM использует равномерное распределение,
так что задержка находится в пределах 𝜇 ± 𝜎. Параметр корреляции управляет отношением между последовательными псевдослучайными значениями.
1. При необходимости восстановите конфигурацию интерфейсов по умолчанию на узлах h1 и h2:
1 sudo tc qdisc del dev h1-eth0 root netem
1 sudo tc qdisc del dev h2-eth0 root netem
![](image/img_12.png){#fig-012 width=70%}
2. Добавьте на узле h1 задержку в 100 мс со случайным отклонением 10 мс:
1 sudo tc qdisc add dev h1-eth0 root netem delay 100ms 10ms
![](image/img_13.png){#fig-013 width=70%}
3. Проверьте, что соединение от хоста h1 к хосту h2 имеет задержку 100 мс со
случайным отклонением ±10 мс, используя в терминале хоста h1 команду ping с параметром -c 6. Укажите в отчёте минимальное, среднее, максимальное и стандартное отклонение времени приёма-передачи (RTT).
4. Восстановите конфигурацию интерфейса по умолчанию на узле h1.

## 4.4.2.5. Добавление значения корреляции для джиттера и задержки
в интерфейс подключения к эмулируемой глобальной сети
1. При необходимости восстановите конфигурацию интерфейсов по умолчанию
на узлах h1 и h2.
2. Добавьте на интерфейсе хоста h1 задержку в 100 мс с вариацией ±10 мс
и значением корреляции в 25%:
1 sudo tc qdisc add dev h1-eth0 root netem delay 100ms 10ms 25%
![](image/img_14.png){#fig-014 width=70%}
3. Убедитесь, что все пакеты, покидающие устройство h1 на интерфейсе h1-eth0, будут иметь время задержки 100 мс со случайным отклонением ±10 мс, при этом время передачи следующего пакета зависит от предыдущего значения на 25%. Используйте для этого в терминале хоста h1 команду ping
с параметром -c 20. Укажите в отчёте минимальное, среднее, максимальное и стандартное отклонение времени приёма-передачи (RTT).
4. Восстановите конфигурацию интерфейса по умолчанию на узле h1.

## 4.4.2.6. Распределение задержки в интерфейсе подключения к эмулируемой глобальной сети
NETEM позволяет пользователю указать распределение, которое описывает, как задержки изменяются в сети. В реальных сетях передачи данных задержки неравномерны, поэтому при моделировании может быть удобно использовать некоторое случайное распределение, например, нормальное, парето или паретонормальное.
1. При необходимости восстановите конфигурацию интерфейсов по умолчанию
на узлах h1 и h2.
2. Задайте нормальное распределение задержки на узле h1 в эмулируемой сети:
1 sudo tc qdisc add dev h1-eth0 root netem delay 100ms 20ms distribution normal
3. Убедитесь, что все пакеты, покидающие хост h1 на интерфейсе h1-eth0, будут иметь время задержки, которое распределено в диапазоне 100 мс ±20 мс.
![](image/img_15.png){#fig-015 width=70%}
Используйте для этого команду ping на терминале хоста h1 с параметром -c 10.
4. Восстановите конфигурацию интерфейса по умолчанию на узле h1.
5. Завершите работу mininet в интерактивном режиме, введя в интерфейсе
mininet:
1 mininet> exit

## 4.4.3. Воспроизведение экспериментов
## 4.4.3.1. Предварительная подготовка
1. Обновите репозитории программного обеспечения на виртуальной машине:
1 sudo apt-get update
2. Установите пакет geeqie — понадобится для просмотра файлов png:
1 sudo apt install geeqie
![](image/img_16.png){#fig-016 width=70%}
3. Для каждого воспроизводимого эксперимента expname создайте свой каталог, в котором будут размещаться файлы эксперимента:
1 mkdir -p ~/work/lab_netem_i/expname
Здесь expname может принимать значения simple-delay, change-delay,
jitter-delay, correlation-delay и т.п.
4. Для каждого случая создайте скрипт для проведения эксперимента
lab_netem_i.py и скрипт для визуализации результатов ping_plot.
## 4.4.3.2. Добавление задержки для интерфейса, подключающегося к эмулируемой глобальной сети
С помощью API Mininet воспроизведите эксперимент по добавлению задержки для интерфейса хоста, подключающегося к эмулируемой глобальной сети.
1. В виртуальной среде mininet в своём рабочем каталоге с проектами создайте
каталог simple-delay и перейдите в него:
1 mkdir -p ~/work/lab_netem_i/simple-delay
2 cd ~/work/lab_netem_i/simple-delay
2. Создаёте скрипт для эксперимента lab_netem_i.py:
![](image/img_17.png){#fig-017 width=70%}
3. В отчёте поясните содержание скрипта lab_netem_i.py. В каких строках
скрипта задается значение задержки для интерфейса хоста? Каким образом
формируется файл с результатами эксперимента для последующего построения графиков, какие значения в нём размещены?
4. Создаёте скрипт для визуализации ping_plot результатов эксперимента:
![](image/img_18.png){#fig-018 width=70%}
5. Задайте права доступа к файлу скрипта:
1 chmod +x ping_plot
6. Создайте Makefile для управления процессом проведения эксперимента:
![](image/img_19.png){#fig-019 width=70%}
7. Выполните эксперимент:
    1 make
8. Продемонстрируйте построенный в результате выполнения скриптов график.
9. Из файла ping.dat удалите первую строку и заново постройте график:
    1 make ping.png
![](image/img_20.png){#fig-020 width=70%}
10. Продемонстрируйте построенный в результате график.
11. Разработайте скрипт для вычисления на основе данных файла ping.dat минимального, среднего, максимального и стандартного отклонения времени приёма-передачи. Добавьте правило запуска скрипта в Makefile. Продемонстрируйте работу скрипта с выводом значений на экран или в отдельный
файл.
12. Очистите каталог от результатов проведения экспериментов:
![](image/img_21.png){#fig-021 width=70%}

# Выводы

Ознакомился с NETEM — инструментом для тестирования производительности приложений в виртуальной сети, а также получил навыки проведения интерактивного и воспроизводимого экспериментов по измерению задержки и её дрожания (jitter) в моделируемой сети в среде Mininet.

# Список литературы{.unnumbered}

::: {#refs}
:::
